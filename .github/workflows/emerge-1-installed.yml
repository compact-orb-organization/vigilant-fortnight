name: Emerge 1 installed

on:
  workflow_dispatch:

env:
  CONFIG_PREFIX: 1
  EMERGE_PARAMETERS: "@installed"
  STAGE_3_DATE: 20250504T164008Z
  STAGE_3_PROFILE: amd64-desktop-systemd

jobs:
  emerge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Install fuse
          sudo apt-get --quiet update
          sudo apt-get --quiet install libfuse2t64

          # Download, extract, install, and clean up the AWS CLI v2
          wget --directory-prefix=/tmp/ --no-verbose https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip
          unzip -q /tmp/awscli-exe-linux-x86_64-2.0.30.zip -d /tmp/
          rm /tmp/awscli-exe-linux-x86_64-2.0.30.zip
          sudo /tmp/aws/install --update
          rm --recursive /tmp/aws/

          # Download, extract, install, and clean up the mount-s3 tool
          wget --directory-prefix=/tmp/ --no-verbose https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.tar.gz
          sudo mkdir --parents /opt/aws/mountpoint-s3
          sudo tar --extract --directory=/opt/aws/mountpoint-s3/ --file=/tmp/mount-s3.tar.gz
          rm /tmp/mount-s3.tar.gz
          sudo ln --symbolic /opt/aws/mountpoint-s3/bin/mount-s3 /usr/local/bin/mount-s3

      - name: Authenticate S3
        run: |
          sudo aws configure set aws_access_key_id ${{ secrets.S3_ACCESS_KEY_ID }}
          sudo aws configure set aws_secret_access_key ${{ secrets.S3_SECRET_ACCESS_KEY }}

      - name: Set up Gentoo environment
        run: |
          # Download, extract, and clean up the Gentoo stage3 tarball
          wget --directory-prefix=/tmp/ --no-verbose http://mirror.rackspace.com/gentoo/releases/amd64/autobuilds/$STAGE_3_DATE/stage3-$STAGE_3_PROFILE-$STAGE_3_DATE.tar.xz
          wget --directory-prefix=/tmp/ --no-verbose https://distfiles.gentoo.org/releases/amd64/autobuilds/$STAGE_3_DATE/stage3-$STAGE_3_PROFILE-$STAGE_3_DATE.tar.xz.sha256
          cd /tmp/
          sha256sum --check stage3-$STAGE_3_PROFILE-$STAGE_3_DATE.tar.xz.sha256
          if [ $? -ne 0 ]; then
            echo "Checksum verification failed"
            exit 1
          fi
          cd -
          rm /tmp/stage3-$STAGE_3_PROFILE-$STAGE_3_DATE.tar.xz.sha256
          sudo mkdir /var/lib/gentoo
          sudo tar --directory=/var/lib/gentoo/ --extract --file /tmp/stage3-$STAGE_3_PROFILE-$STAGE_3_DATE.tar.xz --numeric-owner --preserve-permissions --xattrs-include='*.*'
          rm /tmp/stage3-$STAGE_3_PROFILE-$STAGE_3_DATE.tar.xz

          # Copy the locale configuration file
          sudo cp ./$CONFIG_PREFIX/locale.gen /var/lib/gentoo/etc/

          # Copy the Portage configuration files
          sudo cp --recursive ./$CONFIG_PREFIX/portage/ /var/lib/gentoo/etc/

          # Remove the default Gentoo binary package host configuration
          sudo rm /var/lib/gentoo/etc/portage/binrepos.conf/gentoobinhost.conf

      - name: Mount filesystems
        run: |
          sudo mount --types proc /proc /var/lib/gentoo/proc
          sudo mount --rbind /sys /var/lib/gentoo/sys
          sudo mount --make-rslave /var/lib/gentoo/sys
          sudo mount --rbind /dev /var/lib/gentoo/dev
          sudo mount --make-rslave /var/lib/gentoo/dev
          sudo mount --bind /run /var/lib/gentoo/run
          sudo mount --make-slave /var/lib/gentoo/run
          sudo mount --types tmpfs tmpfs /var/lib/gentoo/tmp

      - name: Mount S3 bucket
        run: |
          # Create a mount point and mount the specified S3 bucket/prefix using mount-s3
          # The mount uses a temporary directory for caching and is read-only
          sudo mkdir /var/lib/gentoo/tmp/mountpoint
          sudo mount-s3 --cache /var/lib/gentoo/tmp/ --endpoint-url https://${{ secrets.S3_ENDPOINT }} --prefix $CONFIG_PREFIX/ --read-only --region ${{ secrets.S3_REGION }} ${{ secrets.S3_BUCKET }} /var/lib/gentoo/tmp/mountpoint/

          # Set up an overlay filesystem for the binary package cache (/var/cache/binpkgs)
          # The lower directory is the read-only S3 mount, upper and work directories are temporary local storage
          # This allows new binary packages to be written locally before being uploaded
          sudo mkdir /var/lib/gentoo/tmp/upperdir /var/lib/gentoo/tmp/workdir
          sudo mount --types overlay overlay --options lowerdir=/var/lib/gentoo/tmp/mountpoint/,upperdir=/var/lib/gentoo/tmp/upperdir/,workdir=/var/lib/gentoo/tmp/workdir/ /var/lib/gentoo/var/cache/binpkgs/

      - name: Chroot and run emerge.sh
        run: |
          sudo cp ./$CONFIG_PREFIX/emerge.sh /var/lib/gentoo/tmp/
          sudo chroot /var/lib/gentoo/ env S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }} S3_BUCKET=${{ secrets.S3_BUCKET }} S3_ENDPOINT=${{ secrets.S3_ENDPOINT }} S3_REGION=${{ secrets.S3_REGION }} S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }} /usr/bin/bash /tmp/emerge.sh "$EMERGE_PARAMETERS"
          sudo rm /var/lib/gentoo/tmp/emerge.sh

      - name: Upload binary packages
        if: always()
        run: |
          # Copy the newly built binary packages (from the overlay's upperdir) to the S3 bucket
          sudo aws s3 cp /var/lib/gentoo/tmp/upperdir/ s3://${{ secrets.S3_BUCKET }}/$CONFIG_PREFIX/ --endpoint-url https://${{ secrets.S3_ENDPOINT }} --no-progress --recursive --region ${{ secrets.S3_REGION }}
